attacker[active]

principal Alice[
  knows public salt, alice_nonce, bob_nonce
  knows private alice_data
  knows private alice_identity_private_key
  generates alice_ephemeral_private_key
  alice_identity_public_key = G^alice_identity_private_key
  alice_ephemeral_public_key = G^alice_ephemeral_private_key
]

principal Bob[
  knows public salt, info, alice_nonce, bob_nonce
  knows private bob_data
  knows private bob_identity_private_key
  generates bob_ephemeral_private_key
  bob_identity_public_key = G^bob_identity_private_key
  bob_ephemeral_public_key = G^bob_ephemeral_private_key
]

Alice -> Bob: [alice_identity_public_key], [alice_ephemeral_public_key]

principal Bob[
  bob_handshake = SIGN(bob_identity_private_key, alice_ephemeral_public_key)
  bob_shared_secret = alice_ephemeral_public_key^bob_ephemeral_private_key
  bob_receiving_key, bob_sending_key = HKDF(salt, bob_shared_secret, info)
]

Bob -> Alice: [bob_identity_public_key], [bob_ephemeral_public_key], bob_handshake

principal Alice[
  _ = SIGNVERIF(bob_identity_public_key, alice_ephemeral_public_key, bob_handshake)
  alice_shared_secret = bob_ephemeral_public_key^alice_ephemeral_private_key
  alice_sending_key, alice_receiving_key = HKDF(salt, alice_shared_secret, info)
  alice_handshake = SIGN(alice_identity_private_key, bob_ephemeral_public_key)
]

Alice -> Bob: alice_handshake

principal Bob[
  _ = SIGNVERIF(alice_identity_public_key, bob_ephemeral_public_key, alice_handshake)?
  bob_message = AEAD_ENC(bob_sending_key, bob_data, nil)
]

Bob -> Alice: bob_message

principal Alice[
  _ = AEAD_DEC(alice_receiving_key, bob_message, nil)?
  alice_message = AEAD_ENC(alice_sending_key, alice_data, nil)
]

Alice -> Bob: alice_message

principal Bob[
  _ = AEAD_DEC(bob_receiving_key, alice_message, nil)?
]

queries[
  authentication? Bob -> Alice: bob_message
  authentication? Alice -> Bob: alice_message
  confidentiality? alice_data
  confidentiality? bob_data
]
