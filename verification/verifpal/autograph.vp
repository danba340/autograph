attacker[active]

principal Alice[
  knows public salt, ci, cr, na, nb
  knows private da
  knows private ika
  knows private eka
  pika = G^ika
  peka = G^eka
]

principal Bob[
  knows public salt, ci, cr, na, nb
  knows private db
  knows private ikb
  knows private ekb
  pikb = G^ikb
  pekb = G^ekb
]

Alice -> Bob: [pika], peka

principal Bob[
  tb = CONCAT(pika, pikb, peka, pekb)
  sb = SIGN(ikb, tb)
  kmb = peka^ekb
  skab = HKDF(salt, kmb, ci)
  skbb = HKDF(salt, kmb, cr)
  hb = AEAD_ENC(skbb, sb, nil)
]

Bob -> Alice: [pikb], pekb, hb

principal Alice[
  ta = CONCAT(pika, pikb, peka, pekb)
  kma = pekb^eka
  skba = HKDF(salt, kma, cr)
  sba = AEAD_DEC(skba, hb, nil)?
  _ = SIGNVERIF(pikb, ta, sba)?
  sa = SIGN(ika, ta)
  skaa = HKDF(salt, kma, ci)
  ha = AEAD_ENC(skaa, sa, nil)
]

Alice -> Bob: ha

principal Bob[
  sab = AEAD_DEC(skab, ha, nil)?
  _ = SIGNVERIF(pika, tb, sab)?
  skbb1 = HKDF(salt, skbb, nb)
  mb = AEAD_ENC(skbb1, db, nil)
]

Bob -> Alice: mb

principal Alice[
  skba1 = HKDF(salt, skba, nb)
  _ = AEAD_DEC(skba1, mb, nil)?
  skaa1 = HKDF(salt, skaa, na)
  ma = AEAD_ENC(skaa1, da, nil)
]

Alice -> Bob: ma

principal Bob[
  skab1 = HKDF(salt, skab, na)
  _ = AEAD_DEC(skab1, ma, nil)?
]

queries[
  authentication? Bob -> Alice: mb
  authentication? Alice -> Bob: ma
  confidentiality? da
  confidentiality? db
]
