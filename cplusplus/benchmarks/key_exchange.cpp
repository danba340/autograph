#include <benchmark/benchmark.h>

#include <stdexcept>

#include "autograph.h"

static void key_exchange(benchmark::State &benchmarkState) {
  Autograph::State initialState = {
      118, 164, 17,  240, 147, 79,  190, 38,  66,  93,  254, 238, 125, 202, 197,
      2,   56,  252, 122, 177, 18,  187, 249, 208, 29,  149, 122, 103, 57,  199,
      19,  17,  213, 153, 88,  124, 93,  136, 104, 111, 196, 208, 155, 156, 165,
      31,  120, 186, 79,  205, 247, 175, 243, 184, 114, 80,  152, 243, 24,  225,
      91,  220, 141, 150, 177, 67,  45,  125, 158, 190, 181, 222, 101, 149, 224,
      200, 223, 235, 222, 110, 67,  61,  200, 62,  29,  37,  150, 228, 137, 114,
      143, 77,  115, 135, 143, 103, 0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   201, 142, 54,  248, 151, 150, 224, 79,  30,  126, 207,
      157, 118, 85,  9,   212, 148, 156, 73,  176, 107, 107, 47,  111, 95,  98,
      33,  192, 80,  223, 48,  221, 35,  16,  23,  37,  205, 131, 166, 97,  13,
      81,  136, 246, 193, 253, 139, 193, 230, 155, 222, 221, 37,  114, 190, 87,
      104, 44,  210, 144, 127, 176, 198, 45,  88,  115, 171, 4,   34,  181, 120,
      21,  10,  39,  204, 215, 158, 210, 177, 243, 28,  138, 52,  91,  236, 55,
      30,  117, 10,  125, 87,  232, 80,  6,   232, 93};

  Autograph::State state;
  Autograph::Signature signature;

  for (auto _ : benchmarkState) {
    std::copy(initialState.begin(), initialState.end(), state.begin());
    if (!autograph_key_exchange(signature.data(), state.data(), true)) {
      throw std::runtime_error("Key exchange failed");
    }
  }
}

static void verify_key_exchange(benchmark::State &benchmarkState) {
  Autograph::State initialState = {
      118, 164, 17,  240, 147, 79,  190, 38,  66,  93,  254, 238, 125, 202, 197,
      2,   56,  252, 122, 177, 18,  187, 249, 208, 29,  149, 122, 103, 57,  199,
      19,  17,  213, 153, 88,  124, 93,  136, 104, 111, 196, 208, 155, 156, 165,
      31,  120, 186, 79,  205, 247, 175, 243, 184, 114, 80,  152, 243, 24,  225,
      91,  220, 141, 150, 177, 67,  45,  125, 158, 190, 181, 222, 101, 149, 224,
      200, 223, 235, 222, 110, 67,  61,  200, 62,  29,  37,  150, 228, 137, 114,
      143, 77,  115, 135, 143, 103, 0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   217, 155, 76,  165, 59,  188, 67,  41,  220, 168, 9,   28,
      236, 172, 159, 253, 132, 240, 104, 28,  183, 164, 95,  57,  132, 227, 32,
      234, 84,  97,  192, 180, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   228, 80,  92,  70,  9,   154, 102, 79,  79,  238, 183, 1,   104,
      239, 123, 93,  228, 74,  44,  60,  147, 21,  105, 30,  217, 135, 107, 104,
      104, 117, 50,  116, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   35,  16,  23,  37,  205, 131, 166, 97,  13,
      81,  136, 246, 193, 253, 139, 193, 230, 155, 222, 221, 37,  114, 190, 87,
      104, 44,  210, 144, 127, 176, 198, 45,  88,  115, 171, 4,   34,  181, 120,
      21,  10,  39,  204, 215, 158, 210, 177, 243, 28,  138, 52,  91,  236, 55,
      30,  117, 10,  125, 87,  232, 80,  6,   232, 93};

  Autograph::State state;

  Autograph::Signature signature = {
      250, 223, 89,  191, 184, 213, 155, 233, 5,   153, 109, 133, 148,
      152, 247, 25,  100, 247, 219, 247, 174, 18,  52,  119, 23,  0,
      229, 18,  104, 158, 177, 221, 100, 44,  83,  20,  129, 129, 39,
      156, 119, 247, 59,  12,  220, 184, 207, 44,  211, 160, 50,  225,
      163, 106, 15,  116, 0,   104, 33,  153, 120, 111, 170, 11};

  for (auto _ : benchmarkState) {
    std::copy(initialState.begin(), initialState.end(), state.begin());
    if (!autograph_verify_key_exchange(state.data(), signature.data())) {
      throw std::runtime_error("Key exchange verification failed");
    }
  }
}

BENCHMARK(key_exchange);
BENCHMARK(verify_key_exchange);
